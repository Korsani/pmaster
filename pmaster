#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use Term::ANSIColor qw(:constants colorstrip);
use File::Temp;
use Pod::Usage;
use Getopt::Long;
use File::Copy;
use DBI;
use Sys::Syslog qw( :standard :macros );
use constant VERSION	=> 0.3;

use constant DB_FILE	=> 'pmaster.db';
use constant DB_DIR		=> '/var/db';
use constant DB_VERS	=> 1;
use constant PM_OPTS	=> '-dbg';

use vars qw( $HELP $EXISTS $ALL $DEBUG $COMPILE $PROGRESS $LAST $VERSION $WAIT);

die "Not on FreeBSD\n" unless ("$^O" =~ "freebsd");

GetOptions(
	'help'		=> \$HELP,
	'exists'	=> \$EXISTS,
	'all'		=> \$ALL,
	'debug'		=> \$DEBUG,
	'compile'	=> \$COMPILE,
	'progress'	=> \$PROGRESS,
	'last'		=> \$LAST,
	'version'	=> \$VERSION,
	'wait=i'	=> \$WAIT
);
if ($VERSION) {
	printf("%s\n",VERSION);
	exit 0;
}

if ($HELP) {
	pod2usage(-verbose => 2);
	exit;
}

my $DRIVER='SQLite';
my $DSN="DBI:$DRIVER:dbname=".DB_DIR.'/'.DB_FILE;
my %table=(
	'stats'=>'pmaster_stats',
	'config'=>'pmaster_config'
);
# Sql statements to create table
my %create_table=(
	# 'time_user', 'time_sys', 'os' are unused
	$table{'stats'} => 'CREATE TABLE '.$table{'stats'}.' (id integer primary key autoincrement, timestamp timestamp DEFAULT CURRENT_TIMESTAMP, origin text, time_real float, time_user float, time_sys float,portmaster_options text, mac text,os text, kernel_vers text, arch text, cpu_freq integer, memory integer, ccache bool, log_size_lines integer);',
	$table{'config'} => 'CREATE TABLE '.$table{'config'}.' (key text type uniq, value text);'
);
# Sql statements to update database
my %update_table=(
	2=>'test'
);

our %env;
our %exit;

sub disp2 {
	my %msg=%{shift()};
	$msg{'prefix'}=1 if (not defined $msg{'prefix'});
	if ($msg{'prefix'}) {
		$msg{'prefix'}='['.YELLOW.'pmaster'.RESET.']('.CYAN.caller(0).RESET.') ';
	} else {
		$msg{'prefix'}='';
	}
	my $msg=sprintf('%s'.BRIGHT_WHITE.$msg{'msg'}.RESET."\n",$msg{'prefix'},@{$msg{'params'}});
	if (-t STDOUT) {
		print($msg);
	} else {
		print(colorstrip($msg));
	}
}
sub check_db_tables {
	my $dbh=shift;
	# Let's check if tables exists
	foreach my $table (values %table) {
		if (! $dbh->selectall_array('SELECT name FROM sqlite_master WHERE type="table" AND name="'.$table.'";')) {
			my @res=$dbh->selectall_array($create_table{$table});
			disp2({msg=>"Table %s created",params=>[$table]});
		}
	}
}
sub check_db_version {
	my $dbh=shift;
	my $sql=sprintf('select value from %s where key="%s";',$table{'config'},'db_vers');
	my $db_vers=$dbh->selectall_array($sql);
	# None? Maybe db is juste created
	if($db_vers == 0) {;
		$sql=sprintf('insert into %s (key,value) values ("db_vers",%i);',$table{'config'},DB_VERS);
		$dbh->selectall_array($sql);
		disp2({msg=>'Db version set to %i',params=>[DB_VERS]});
	} elsif ($db_vers < DB_VERS) {		# Time to upgrade!
		foreach my $i ($db_vers+1..DB_VERS) {
			$dbh->selectall_array($update_table{$i});
			$sql=sprintf('update %s set value=%i where key="db_vers";',$table{'config'},$i);
			$dbh->selectall_array($sql);

		}
	}
}
sub check_db_path {
	for my $dir ($ENV{'HOME'}) {
		if ( -e $dir.'/'.DB_FILE) {
			disp2({msg=>'Moving %s from %s to %s',params=>[DB_FILE,$dir,DB_DIR]});
			move($dir.'/'.DB_FILE,DB_DIR);
		}
	}
}
sub check_db {
	my $dbh=shift;
	check_db_path($dbh);
	check_db_tables($dbh);
	check_db_version($dbh);
}
# Function to get ports(7) variable's values
# For that, I ask a Makefile to display me vars and values
sub get_make_var {
	my $var=shift;
	my $uvar=uc($var);
	my $fh=File::Temp->new();
	print $fh "CATEGORIES=devel\n.include <bsd.port.mk>\ninfo:\n\t\@echo ".$uvar."=\$(".$uvar.")";
	open(M,'make -f '.$fh->filename.' info|') or die "$!";
	while (my $line=<M>) {
		if ($line=~/^$uvar=(.*)/) {
			return $1;
		}
	}
}
sub get_make_vars {
	my $dbh=shift;
	my @vars=('PORTSDIR','WRKDIRPREFIX','WITH_CCACHE_BUILD');
	foreach my $var (@vars) {
		my @res=$dbh->selectall_array('select value from '.$table{'config'}.' where key="'.uc($var).'";');
		if(scalar @res == 0) {
			disp2({msg=>'No var %s found in config. Getting it',params=>[$var]}) if ($DEBUG);
			my $value=get_make_var($var);
			$dbh->selectall_array('insert into '.$table{'config'}.' (key,value) values ("'.$var.'","'.$value.'");');
			$env{$var}=$value;
		} else {
			$env{$var}=@{ shift @res }[0];
		}
	}
}
# Get average compile time of a port
sub get_port_stats {
	my $dbh=shift;
	my $o=shift;
	my $sql='select avg(time_real) from '.$table{'stats'}.' where origin="'.$o.'"';
	my @res=$dbh->selectall_array($sql);
	if (scalar @res == 0) {
		return undef;
	} else {
		return shift @{ shift @res };
	}
}
# Return given field
sub get_db_infos {
	my $dbh=shift;
	my $o=shift;
	my $field=shift;
	my $sql='select id,'.$field.' from '.$table{'stats'}.' where origin="'.$o.'" order by id';
	my @res=$dbh->selectall_array($sql);
	if (scalar @res == 0) {
		return undef;
	} else {
		return @res;
	}
}
# Translate arbitrary string to a port name
sub resolve_origin {
	my $dbh=shift;
	my @origins;
	my $kvers=`uname -K`;
	$kvers=~s/^(..).*/$1/;
	while (my $pkg=shift) {
		my $port=`pkg info -o $pkg 2>/dev/null | awk '{print \$2}'`;
		chomp $port;
		if ( ! $port) {
			# So it's a package I don't know about. Let's search in INDEX
			open(I,"<$env{PORTSDIR}/INDEX-$kvers") or die "$!";
			while (my $line = <I>) {
				if ($line =~ /^$pkg-/) {
					$port=((split(/\|/,$line))[1]);
				}
			}
			close(I);
		}
		if (! $port) {
			disp2({msg=>'No origin found for '.BRIGHT_WHITE.'%s'.RESET,params=>[$pkg]});
		} else {
			push @origins,($port);
		}
	}
	return @origins;
}
sub show_stats {
	my $dbh=shift;
	my @pkgs=@_;
	if ($ALL) {
		foreach my $e ($dbh->selectall_array('select origin from '.$table{'stats'}.' group by origin order by origin;')) {
			push @pkgs,(shift @{$e});
		}
	}

	# Display stats of given ports
	foreach my $port (@pkgs) {
		my $sql='select timestamp,time_real from '.$table{'stats'}.' where origin="'.$port.'"';
		my @res=$dbh->selectall_array($sql);
		if (scalar @res > 0) {	
			my @times;
			foreach my $e (@res) {
				push @times,(join(' => ',@{ $e }));
			}
			disp2({prefix=>0,msg=>YELLOW.'%s'.RESET.":\n\t".CYAN."Average duration:".RESET." %0is\n\t".CYAN."Series: \n".RESET."%s",params=>[$port,get_port_stats($dbh,$port),join("\n",@times)]});
		}
	}
}
# Run compilation of a port
sub compile_port {
	my $dbh=shift;
	my $port=shift;
	my @a=get_db_infos($dbh,$port,'log_size_lines');
	# Returns [ [ id, field ] [ ... ] ]
	# And I want the field of the last element
	my $lines=@{ $a[-1]}[1];
	# If line size is available and progress is asked
	my $start=time();
	my $ec=0;
	disp2({msg=>'Building %s',params=>[$port]});
	if ($lines and $PROGRESS) {
		$ec=system('portmaster',PM_OPTS,$port," | pv -l -s $lines -pet");
	} else {
		$lines=0;
		#$ec=system('portmaster',PM_OPTS,$port);
		open(P,'portmaster --no-confirm '.PM_OPTS.' '.$port.'|') or $ec=1;
		while(<P>) {
			$lines++;
			print;
		}
		close(P);
		$ec=$?;
	}
	my $end=time();
	# If everything went fine...
	if ($ec == 0) {
		store_stats($dbh,$port,($end-$start),$lines);
	} else {
		disp2({msg=>'Something failed with %s building: portmaster exits with %i',params=>[$port,$ec/256]});
	}
	return($ec/256);
}
# Store stats to database
sub store_stats {
	my $dbh=shift; my $o=shift; my $real=shift; my $lines=shift;
	my $mac=`uname -m|xargs echo -n`;		# Machine type (amd64, arm64, ...)
	my $kvers=`uname -K|xargs`;	# Kerner version (1201000, ...)
	my $arch=`uname -p|xargs`;	# Arch (amd64, aarch64,...
	my $mem=`sysctl -n hw.physmem|xargs`;		# Physical amount of memory
	my $cfreq=`sysctl -n dev.cpu.0.freq|xargs`;	# Cpu freq. May vary by sake of powerd(8)/powerdxx(8)
	my $sql=sprintf("insert into %s (origin,time_real,portmaster_options,mac,kernel_vers,arch,cpu_freq,memory,ccache,log_size_lines) values ('%s',%i,'%s','%s','%s','%s',%i,%i,%i,%i);select last_insert_rowid();",$table{'stats'},$o,	$real,PM_OPTS, `uname -m| xargs echo -n`,`uname -K|xargs echo -n`,`uname -p | xargs echo -n`,`sysctl -n dev.cpu.0.freq| xargs echo -n`, `sysctl -n hw.physmem| xargs echo -n`, $env{'WITH_CCACHE_BUILD'} eq 'yes' ? 1 : 0, $lines);
	$dbh->selectall_array($sql);
}
sub loop_on_me {
	my $dbh=shift;
	my $a=shift;
	while (1) {
		if ($a) {
			my $mess=sprintf('%s:%s%%',$a->{'port'},$a->{'progress'});
			syslog(LOG_INFO,$mess);
		}
		#printf("%s\n",$mess);
		$a=get_running_port($dbh);
		sleep($WAIT);
	}
}
sub get_running_port {
	my $dbh=shift,
	my @list=glob ( "$env{'WRKDIRPREFIX'}$env{'PORTSDIR'}/*/*/work" );
	foreach my $w (@list) {
		my $port=$w;
		$port=~s!$env{'WRKDIRPREFIX'}$env{'PORTSDIR'}/(.*)/work!$1!;
		disp2({msg=>'Dealing with %s ~ %s',params=>[$w,$port]}) if ($DEBUG);
		# This is the best way I found to detect ongoing portmaster:
		# There should have more at least one process with `make` and $WRKDIRPREFIX$PORTSDIR<port>/work somewhere...
		my $npid=`ps -a | grep -v grep | grep '$w'| awk '{print \$1}'| wc -l|xargs`;
		chomp $npid;
		if ($npid > 0) {
			exit 0 if ($EXISTS);
			# When base dir has been created?
			my @stats=stat($env{'WRKDIRPREFIX'}.$env{'PORTSDIR'}.'/'.$port);
			my $eta='?';my $progress='?';
			if (my $time = get_port_stats($dbh,$port)) {
				$eta=sprintf('%0i',$time-(time()-$stats[10]));
				$progress=sprintf('%2i',($time-$eta)/$time*100);
			}
			return {port=>$port,start_time=>$stats[10],eta=>$eta,progress=>$progress};
		}
	}
}

my $dbh=DBI->connect($DSN,'','',{RaiseError => 1}) or die $DBI::errstr;

check_db($dbh);

# == let's run

my @pkgs;
if (scalar @ARGV ne 0) {
	@pkgs=@ARGV;
}
if ($LAST) {
	my $sql='select origin from '.$table{'stats'}.' order by id desc limit 1;';
	my @e=$dbh->selectall_array($sql);
	push @pkgs,(shift @{shift @e});
}
get_make_vars($dbh);
@pkgs=resolve_origin($dbh,@pkgs);

# Just show stats of given ports
if (not $COMPILE and (scalar @pkgs > 0 or $ALL)) {	# show stats about a package
	show_stats($dbh,@pkgs);
	exit 0;
} elsif ($COMPILE) {		# Compile ports
	foreach my $port (@pkgs) {
		$exit{$port}=compile_port($dbh,$port);
	}
	if (scalar keys %exit > 0) {
		disp2({msg=>'Summary:'});
		map {disp2({msg=>' > %s:%i',params=>[$_,$exit{$_}]});} @pkgs;
	}
} else {					# Show what portmaster is currently doing
	# Get folders where job is beeing done
	#(my $port,my $start_time,my $eta, my $progress)=get_running_port();
	my $a=get_running_port($dbh);
	openlog('pmaster','ndelay,pid','local0');
	if ($a) {
		if (not ($WAIT)) {
			disp2({prefix=>0,msg=>YELLOW.'%s'.RESET.":\n\t".CYAN.'Started'.RESET.": %s\n\t".CYAN.'Elapsed'.RESET.": %0is\n\t".CYAN.'ETA'.RESET.": %s\n\t".CYAN.'Progress'.RESET.": %2s%%",params=>[$a->{'port'},scalar localtime $a->{'start_time'},time()-$a->{'start_time'},($a->{'eta'} eq '?'?'?' : ($a->{'eta'}.'s ('.scalar localtime (time()+$a->{'eta'})).')'),$a->{'progress'}]});
		} else {
			loop_on_me($dbh,$a);
		}
	} elsif ($WAIT) {
		loop_on_me($dbh,{port=>'(not working)',progress=>'?',eta=>0});
	}
}

=pod

=head1 NAME

	pmaster

=head1 SYNOPSIS

	pmaster --help
	pmaster [ --exists ] [ -w <n> ]
	pmaster <port> | -a | -l
	pmaster -c <port>

=head1 DESCRIPTION

Show running portmaster(1) information.

It uses a sqlite3(1) database stored in your home.

=head1 OPTIONS

=over

=item --exists

	Immediatly return with true if a compilation is running.

=item <port>

	Display stats for this port, or all (that have data) if -a.

=item -l

	Show last built package.

=item -a

	Show stats of all packages.

=item -c

	Compile a port.

=item -w

	Wait forever, logging to syslog every B<n> seconds what's going on.

=back

=cut
